<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>面试题 on long·pf</title>
    <link>http://blog.longpengfei.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
    <description>Recent content in 面试题 on long·pf</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2018. All rights reserved.</copyright>
    <lastBuildDate>Mon, 05 Mar 2018 14:12:38 +0800</lastBuildDate>
    
	<atom:link href="http://blog.longpengfei.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Qq_group_iOS_case</title>
      <link>http://blog.longpengfei.com/post/qq_group_ios_case/</link>
      <pubDate>Mon, 05 Mar 2018 14:12:38 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/qq_group_ios_case/</guid>
      <description>多线程
 队列&amp;amp;线程关系 几种多线程实现  项目
 负责的部分 流程 架构 难点  内存管理
 mrc arc autoreleasepool  runloop
 http缓存
 NSString copy strong
 UIScrollView 滚动原理
 分类属性、关联对象的实现原理、以及序列化时，是否会将关联对象序列化
 CoreAnimation、CoreGraphic的理解
 HTTP、SSL协议的熟悉程度
  
多线程 队列&amp;amp;线程关系  dispatch_sync添加任务到队列,不会创建新的线程都是在当前线程中处理的.无论添加到串行队列(main或自建)或者并行队列里(globalQueue或自建),都是串行效果,因为这个方法是等任务执行完成以后才会返回. dispatch_async添加任务到  mainQueue不创建线程,在主线程中串行执行 globalQueue和自己创建的并行队列: 根据任务系统决定开辟线程个数 自建的串行队列: 创建一个线程,串行执行   一些相关的测试例子
几种多线程实现  pthread  一套通用多线程api 适用于Unix\Linux\Windows等系统 跨平台\可移植 使用难度大 c语言,几乎不用,由程序员进行管理线程生命周期  NSThread  使用更加面向对象 简单易用,可直接操作线程对象 oc语言,偶尔使用,由程序员管理生命周期  GCD  旨在替代NSThread等线程技术 充分利用设备的多核(自动) 经常使用,自动管理  NSOperation  基于GCD(底层是GCD) 比GCD多了一些简单使用的功能 使用更加面向对象 OC语言,经常使用,自动管理生命周期   NSOperation NSOperation本身是一个抽象类,可通过下面几个方法使用</description>
    </item>
    
    <item>
      <title>整理一些ios面试题(偏简单的)</title>
      <link>http://blog.longpengfei.com/post/ios-interview-question-new/</link>
      <pubDate>Tue, 10 Jan 2017 01:49:52 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/ios-interview-question-new/</guid>
      <description>这里是一位别的同学整理的
1.MVC 具有什么样的优势，各个模块之间怎么通信，比如点击 Button 后 怎么通知 Model？ 
MVC 模式的优点。
1.低耦合性
2.有利于开发分工
3.有利于组件重用
4.可维护性
button可以通过target-action高速controller,controller通过kvo告诉model
2.两个无限长度链表（也就是可能有环） 判断有没有交点 看这里
3.UITableView 的相关优化
看UIKit性能优化,印象笔记 和 这个
4. KVO、Notification、delegate 各自的优缺点，效率还有使用场景 看这里
5.如何手动通知 KVO 看这里;
6.Objective-C 中的 copy 方法
Objective-c中对象的Copy、MutableCopy、浅拷贝、深拷贝
浅析Objective-C的copy
7. runtime 中，SEL 和 IMP 的区别
SEL : 类成员方法的指针，但不同于C语言中的函数指针，函数指针直接保存了方法的地址，但SEL只是方法编号。
IMP:一个函数指针,保存了方法的地址
8 . autoreleasepool 的使用场景和原理
如果你编写的程序不是基于 UI 框架的，比如说命令行工具； 如果你编写的循环中创建了大量的临时对象； 如果你创建了一个辅助线程。
原理解析1
解析2
9 . RunLoop 的实现原理和数据结构，什么时候会用到
深入理解runloop
runloop小结
10 . block 为什么会有循环引用 
认识block
这里有一点没有说明 : arc和mrc中block的区别,就是block内访问或者修改外部变量的时候,arc自动将block处于堆中,mrc栈中</description>
    </item>
    
  </channel>
</rss>