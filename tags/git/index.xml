<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on long·pf</title>
    <link>http://blog.longpengfei.com/tags/git/</link>
    <description>Recent content in Git on long·pf</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2018. All rights reserved.</copyright>
    <lastBuildDate>Fri, 30 Dec 2016 14:52:55 +0800</lastBuildDate>
    
	<atom:link href="http://blog.longpengfei.com/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git Flow 常用命令</title>
      <link>http://blog.longpengfei.com/post/git-flow-command/</link>
      <pubDate>Fri, 30 Dec 2016 14:52:55 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/git-flow-command/</guid>
      <description>git flow feature start branchname
 开始一个featuer分支,feature分支的名字一般为功能+人名,如capture.xiaoming  git flow feature publish branchname
 将一个featuer分支推到远程,多人开发  git checkout -b feature/branchname origin/feature/branchname * 将远程的featuer分支下到本地开发
git flow feature finish branchname * 合并至本地develop * 删除任务分支
git pull --rebase
git flow release start v6.6.3 * 开始release分支
git flow release publish v6.6.3
git flow release finish v6.6.3 * 合并release分支到master * 在master上打上tag * 合并release到develop * 删除release
git flow hotfix start v6.6.4 * 开始修复分支
git flow hotfix finish v6.</description>
    </item>
    
    <item>
      <title>Git 常用命令简记</title>
      <link>http://blog.longpengfei.com/post/git-command/</link>
      <pubDate>Fri, 30 Dec 2016 14:51:55 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/git-command/</guid>
      <description>前:HEAD关键字是指当前分支的最新一次提交,就是版本库中该分支上的最新版本
git init git init 初始化一个repo,创建一个.git文件夹
git clone git clone url newname nenamew 可以不要
git log git log --oneline 每条log显示一行
git log --oneline --graph 图形化
git log branchname 指定分支log
git log --oneline branch1 ^branch2 在分支1,不在分支2,^为排除
git log --author=[author name]指定作者
git log --grep=keywords筛选commit信息
git log --grep=keywords --author=authorname 是OR的关系,如果想为AND则添加&amp;ndash;all-match
git reflog 对reflog进行管理的命令,reflog是git用来记录引用变化的一种机制,比如记录分支的变化或者是HEAD引用的变化 当git reflog 不指定引用的时候,默认列出HEAD的reflog git会将变化记录到HEAD对应的reflog文件中,其路径为.git/logs/HEAD,分支的reflog文件都放在.git/logs/refs目录下的子目录中.
git reflog 可以看到reset的commit
git add git add file
git add . 递归添加工作区的修改到暂缓区
git commit git commit -m &amp;quot;message&amp;quot;</description>
    </item>
    
  </channel>
</rss>