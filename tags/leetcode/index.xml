<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leetcode on long·pf</title>
    <link>http://blog.longpengfei.com/tags/leetcode/</link>
    <description>Recent content in Leetcode on long·pf</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2018. All rights reserved.</copyright>
    <lastBuildDate>Thu, 25 Jul 2019 16:54:49 +0800</lastBuildDate>
    
	<atom:link href="http://blog.longpengfei.com/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>51 N Queens N皇后问题</title>
      <link>http://blog.longpengfei.com/post/51-n-queens-n%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 25 Jul 2019 16:54:49 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/51-n-queens-n%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</guid>
      <description>The n-queens puzzle(难题) is the problem of placing n queens on an n×n chessboard(棋盘) such that no two queens attack each other.
Given an integer n, return all distinct(不同的) solutions to the n-queens puzzle.
Each solution contains a distinct board configuration of the n-queens&amp;rsquo; placement, where &amp;lsquo;Q&amp;rsquo; and &amp;lsquo;.&amp;rsquo; both indicate a queen and an empty space respectively(分别地).
 Example: Input: 4 Output: [ [&amp;quot;.Q..&amp;quot;, // Solution 1 &amp;quot;...Q&amp;quot;, &amp;quot;Q...&amp;quot;, &amp;quot;.</description>
    </item>
    
    <item>
      <title>50. Pow(x, n) 求x的n次方</title>
      <link>http://blog.longpengfei.com/post/50-pow/</link>
      <pubDate>Thu, 04 Jul 2019 16:51:09 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/50-pow/</guid>
      <description>Implement pow(x, n), which calculates x raised to the power n (xn).
 Example 1: Input: 2.00000, 10 Output: 1024.00000 Example 2: Input: 2.10000, 3 Output: 9.26100 Example 3: Input: 2.00000, -2 Output: 0.25000 Explanation: 2-2 = 1/22 = 1/4 = 0.25 Note: -100.0 &amp;lt; x &amp;lt; 100.0 n is a 32-bit signed integer, within the range [−231, 231 − 1]  求x的n次方,利用递归这班计算
double myPow3(double x,int n){ if (n==0) return 1; double half = myPow3(x, n/2); if (n%2==0) return half*half; if (n&amp;gt;0) return half*half*x; return half*half/x; }  </description>
    </item>
    
    <item>
      <title>49. Group Anagrams 群组错位词</title>
      <link>http://blog.longpengfei.com/post/49-group-anagrams-%E7%BE%A4%E7%BB%84%E9%94%99%E4%BD%8D%E8%AF%8D/</link>
      <pubDate>Wed, 12 Jun 2019 15:49:38 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/49-group-anagrams-%E7%BE%A4%E7%BB%84%E9%94%99%E4%BD%8D%E8%AF%8D/</guid>
      <description>Given an array of strings, group anagrams together.
Example: Input: [&amp;quot;eat&amp;quot;, &amp;quot;tea&amp;quot;, &amp;quot;tan&amp;quot;, &amp;quot;ate&amp;quot;, &amp;quot;nat&amp;quot;, &amp;quot;bat&amp;quot;], Output: [ [&amp;quot;ate&amp;quot;,&amp;quot;eat&amp;quot;,&amp;quot;tea&amp;quot;], [&amp;quot;nat&amp;quot;,&amp;quot;tan&amp;quot;], [&amp;quot;bat&amp;quot;] ]  Note:
All inputs will be in lowercase. The order of your output does not matter.
解法1
vector&amp;lt;vector&amp;lt;string&amp;gt;&amp;gt; groupAnagrams(vector&amp;lt;string&amp;gt;&amp;amp; strs) { vector&amp;lt;vector&amp;lt;string&amp;gt;&amp;gt; res; unordered_map&amp;lt;string, vector&amp;lt;string&amp;gt;&amp;gt; m; for (string str : strs) { string t = str; sort(t.begin(), t.end()); // 这里可以不用判断m[t]存不存在 m[t].push_back(str); } for (auto a : m) { res.</description>
    </item>
    
    <item>
      <title>48. Rotate Image 旋转图像</title>
      <link>http://blog.longpengfei.com/post/48-rotate-image-%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/</link>
      <pubDate>Wed, 12 Jun 2019 14:44:16 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/48-rotate-image-%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/</guid>
      <description>Medium
You are given an n x n 2D matrix representing an image.
Rotate the image by 90 degrees (clockwise).
Note:
You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.
 Example 1: Given input matrix = [ [1,2,3], [4,5,6], [7,8,9] ], rotate the input matrix in-place such that it becomes: [ [7,4,1], [8,5,2], [9,6,3] ] Example 2: Given input matrix = [ [ 5, 1, 9,11], i=0,j=1,n=4 [ 2, 4, 8,10], [13, 3, 6, 7], [15,14,12,16] ], rotate the input matrix in-place such that it becomes: [ [15,13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7,10,11] ]  这道题让我们将一个n*n的二维矩阵顺时针旋转90度.</description>
    </item>
    
    <item>
      <title>47. PermutationsII 全排列2</title>
      <link>http://blog.longpengfei.com/post/47-permutationsii-%E5%85%A8%E6%8E%92%E5%88%972/</link>
      <pubDate>Thu, 06 Jun 2019 17:19:32 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/47-permutationsii-%E5%85%A8%E6%8E%92%E5%88%972/</guid>
      <description>Given a collection of numbers that might contain duplicates, return all possible unique permutations.
Example:
 Input: [1,1,2] Output: [ [1,1,2], [1,2,1], [2,1,1] ]  跟上道题不一样的地方就是会有重复的数字
vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; permuteUnique(vector&amp;lt;int&amp;gt;&amp;amp; nums) { // 这里用set来去重,因为递归回退的时候可能会有重复的元素 set&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; res{}; if (nums.size()==0) return vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;(); sort(nums.begin(), nums.end()); permuteUniqueCore(res, nums, 0, nums.size()); return vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; (res.begin(),res.end()); } void permuteUniqueCore(set&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; &amp;amp;res,vector&amp;lt;int&amp;gt; &amp;amp;nums,int k,int n){ if (k == n) { printArr(nums); res.insert(nums); return; } for (int i = k; i&amp;lt;n; i++) { if (nums[k]==nums[i] &amp;amp;&amp;amp; i!</description>
    </item>
    
    <item>
      <title>46 Permutations 全排列</title>
      <link>http://blog.longpengfei.com/post/46-permutations-%E5%85%A8%E6%8E%92%E5%88%97/</link>
      <pubDate>Thu, 06 Jun 2019 15:56:27 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/46-permutations-%E5%85%A8%E6%8E%92%E5%88%97/</guid>
      <description>Given a collection of distinct(不同) integers, return all possible permutations(全排列).
Example:
 Input: [1,2,3] Output: [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ]  这道题跟这道题https://github.com/longpf/AtOffer#27-字符串的排列简直一模一样
vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; permute(vector&amp;lt;int&amp;gt;&amp;amp; nums) { vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; res{}; if (nums.size() == 0) return res; permuteCore(res, nums, 0, nums.size()); return res; } void permuteCore(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; &amp;amp;res,vector&amp;lt;int&amp;gt; &amp;amp;num,int k,int n){ if (k == n) { res.push_back(num); return; } for (int i = k; i&amp;lt;n; i++) { swap(num[i], num[k]); permuteCore(res, num, k+1, n); swap(num[i], num[k]); } }  </description>
    </item>
    
    <item>
      <title>45. Jump Game 2 跳跃游戏2</title>
      <link>http://blog.longpengfei.com/post/45-jump-game2/</link>
      <pubDate>Wed, 05 Jun 2019 16:55:50 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/45-jump-game2/</guid>
      <description>Given an array of non-negative integers, you are initially positioned at the first index of the array.
Each element in the array represents your maximum jump length at that position.
Your goal is to reach the last index in the minimum number of jumps.
Example:
Input: [2,3,1,1,4] Output: 2 Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.</description>
    </item>
    
    <item>
      <title>44. Wildcard Matching 通配符匹配</title>
      <link>http://blog.longpengfei.com/post/44-wildcard-matching-%E9%80%9A%E9%85%8D%E7%AC%A6%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Tue, 18 Sep 2018 18:12:18 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/44-wildcard-matching-%E9%80%9A%E9%85%8D%E7%AC%A6%E5%8C%B9%E9%85%8D/</guid>
      <description>Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for &#39;?&#39; and &#39;*&#39;. &#39;?&#39; Matches any single character. &#39;*&#39; Matches any sequence of characters (including the empty sequence).  The matching should cover the entire input string (not partial).
Note:
 s could be empty and contains only lowercase letters a-z. p could be empty and contains only lowercase letters a-z, and characters like ?</description>
    </item>
    
    <item>
      <title>146. LRU Cache 最近最少使用置换缓存器</title>
      <link>http://blog.longpengfei.com/post/146-lru-cache-%E6%9C%80%E8%BF%91%E6%9C%80%E5%B0%91%E4%BD%BF%E7%94%A8%E7%BD%AE%E6%8D%A2%E7%BC%93%E5%AD%98%E5%99%A8/</link>
      <pubDate>Mon, 30 Jul 2018 10:25:51 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/146-lru-cache-%E6%9C%80%E8%BF%91%E6%9C%80%E5%B0%91%E4%BD%BF%E7%94%A8%E7%BD%AE%E6%8D%A2%E7%BC%93%E5%AD%98%E5%99%A8/</guid>
      <description>Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.
get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1. put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</description>
    </item>
    
    <item>
      <title>43. Multiply Strings 字符串相乘</title>
      <link>http://blog.longpengfei.com/post/43-multiply-strings-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%B9%98/</link>
      <pubDate>Tue, 24 Jul 2018 11:08:41 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/43-multiply-strings-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%B9%98/</guid>
      <description>Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.
Example 1:
Input: num1 = &amp;quot;2&amp;quot;, num2 = &amp;quot;3&amp;quot; Output: &amp;quot;6&amp;quot;  Example 2:
Input: num1 = &amp;quot;123&amp;quot;, num2 = &amp;quot;456&amp;quot; Output: &amp;quot;56088&amp;quot;  Note:
 The length of both num1 and num2 is &amp;lt; 110. Both num1 and num2 contain only digits 0-9. Both num1 and num2 do not contain any leading zero, except the number 0 itself.</description>
    </item>
    
    <item>
      <title>42. Trapping Rain Water 收集雨水</title>
      <link>http://blog.longpengfei.com/post/42-trapping-rain-water-%E6%94%B6%E9%9B%86%E9%9B%A8%E6%B0%B4/</link>
      <pubDate>Thu, 19 Jul 2018 11:28:13 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/42-trapping-rain-water-%E6%94%B6%E9%9B%86%E9%9B%A8%E6%B0%B4/</guid>
      <description>Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.
The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example:
Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6  解法1 这道题给出一个数组,每个元素是一个宽为1的bar,问这些bar组成的图行最多能装多少水,就是图上蓝色的部分.如果当前位置高度大于两边的高度,我们就认为当前位置对结果有贡献.当前位置的贡献值,为左边高度的最大值和右边高度的最大值,取其中最小的和当前的高度相减.
class Solution { public: int trap(vector&amp;lt;int&amp;gt;&amp;amp; height) { int l=0,r=height.size()-1,level=0,water=0; while(l &amp;lt; r){ int lower = height[height[l]&amp;lt;height[r]?</description>
    </item>
    
    <item>
      <title>41. First Missing Positive 首个缺失的正数</title>
      <link>http://blog.longpengfei.com/post/41-first-missing-positive-%E9%A6%96%E4%B8%AA%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%AD%A3%E6%95%B0/</link>
      <pubDate>Fri, 13 Jul 2018 18:36:37 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/41-first-missing-positive-%E9%A6%96%E4%B8%AA%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%AD%A3%E6%95%B0/</guid>
      <description>Given an unsorted integer array, find the smallest missing positive integer.
Example 1:
Input: [1,2,0] Output: 3  Example 2:
Input: [3,4,-1,1] Output: 2  Example 3:
Input: [7,8,9,11,12] Output: 1  Note:
Your algorithm should run in O(n) time and uses constant extra space.
Difficulty: Hard
这道题让我们找出数组中首个缺失的整数. 并且限定了时间负责度为O(n),空间复杂度为O(1),就是不让新建新的集合. 那这样只能在原数组上进行操作. 这里只能是把对应的数放到对应的索引上.比如例2中,3需要放到index为2的位置上,1要放到index为0的位置上.4和-1因为没有对应的索引被舍弃,-1本来就是负数,4越界了.这样先通过一次for循环排好数值对应的索引.再通过一次for循环找到第一个位置不对的就ok. 
class Solution { public: int firstMissingPositive(vector&amp;lt;int&amp;gt;&amp;amp; nums) { int n = nums.size(); if (n==0) return 1; for (int i=0;i&amp;lt;n;i++){ while (nums[i]&amp;gt;0 &amp;amp;&amp;amp; nums[i]&amp;lt;=n &amp;amp;&amp;amp; nums[i]!</description>
    </item>
    
    <item>
      <title>40. Combination Sum II 组合之和之二</title>
      <link>http://blog.longpengfei.com/post/40-combination-sum-ii-%E7%BB%84%E5%90%88%E4%B9%8B%E5%92%8C%E4%B9%8B%E4%BA%8C/</link>
      <pubDate>Thu, 28 Jun 2018 12:23:10 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/40-combination-sum-ii-%E7%BB%84%E5%90%88%E4%B9%8B%E5%92%8C%E4%B9%8B%E4%BA%8C/</guid>
      <description>Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.
Each number in candidates may only be used once in the combination.
Note:
All numbers (including target) will be positive integers. The solution set must not contain duplicate combinations.
Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is: [ [1, 7], [1, 2, 5], [2, 6], [1, 1, 6] ]  Example 2:</description>
    </item>
    
    <item>
      <title>39. Combination Sum 组合之和</title>
      <link>http://blog.longpengfei.com/post/39-combination-sum-%E7%BB%84%E5%90%88%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Wed, 20 Jun 2018 14:32:45 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/39-combination-sum-%E7%BB%84%E5%90%88%E4%B9%8B%E5%92%8C/</guid>
      <description>Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.
The same repeated number may be chosen from candidates unlimited number of times.
Note:
All numbers (including target) will be positive integers. The solution set must not contain duplicate combinations.
Example 1:
Input: candidates = [2,3,6,7], target = 7, A solution set is: [ [7], [2,2,3] ]  Example 2:</description>
    </item>
    
    <item>
      <title>38. Count and Say 计数和读法</title>
      <link>http://blog.longpengfei.com/post/38-count-and-say-%E8%AE%A1%E6%95%B0%E5%92%8C%E8%AF%BB%E6%B3%95/</link>
      <pubDate>Tue, 19 Jun 2018 18:28:06 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/38-count-and-say-%E8%AE%A1%E6%95%B0%E5%92%8C%E8%AF%BB%E6%B3%95/</guid>
      <description>The count-and-say sequence is the sequence of integers with the first five terms as following:
1. 1 2. 11 3. 21 4. 1211 5. 111221  1 is read off as &amp;quot;one 1&amp;quot; or 11.
11 is read off as &amp;quot;two 1s&amp;quot; or 21.
21 is read off as &amp;quot;one 2, then one 1&amp;quot; or 1211.
Given an integer n, generate the nth term of the count-and-say sequence.
Note: Each term of the sequence of integers will be represented as a string.</description>
    </item>
    
    <item>
      <title>37. Sudoku Solver 求数独的一个解</title>
      <link>http://blog.longpengfei.com/post/37-sudoku-solver-%E6%B1%82%E6%95%B0%E7%8B%AC%E7%9A%84%E4%B8%80%E4%B8%AA%E8%A7%A3/</link>
      <pubDate>Tue, 29 May 2018 15:18:20 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/37-sudoku-solver-%E6%B1%82%E6%95%B0%E7%8B%AC%E7%9A%84%E4%B8%80%E4%B8%AA%E8%A7%A3/</guid>
      <description>Write a program to solve a Sudoku puzzle by filling the empty cells.
A sudoku solution must satisfy all of the following rules:
 Each of the digits 1-9 must occur exactly once in each row. Each of the digits 1-9 must occur exactly once in each column. Each of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.  Empty cells are indicated by the character &amp;lsquo;.</description>
    </item>
    
    <item>
      <title>36. Valid Sudoku 验证数独</title>
      <link>http://blog.longpengfei.com/post/36-valid-sudoku-%E9%AA%8C%E8%AF%81%E6%95%B0%E7%8B%AC/</link>
      <pubDate>Mon, 28 May 2018 18:57:04 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/36-valid-sudoku-%E9%AA%8C%E8%AF%81%E6%95%B0%E7%8B%AC/</guid>
      <description>Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:
Each row must contain the digits 1-9 without repetition. Each column must contain the digits 1-9 without repetition. Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.
The Sudoku board could be partially filled, where empty cells are filled with the character &amp;lsquo;.</description>
    </item>
    
    <item>
      <title>35. Search Insert Position 搜索插入位置</title>
      <link>http://blog.longpengfei.com/post/35-search-insert-position-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Tue, 27 Mar 2018 14:54:16 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/35-search-insert-position-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</guid>
      <description>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
You may assume no duplicates in the array.
Example 1 :
Input: [1,3,5,6], 5 Output: 2  Example 2 :
Input: [1,3,5,6], 2 Output: 1  Example 3 :
Input: [1,3,5,6], 7 Output: 4  Example 4 :</description>
    </item>
    
    <item>
      <title>34. Search for a Range 搜索一个范围</title>
      <link>http://blog.longpengfei.com/post/34-search-for-a-range-%E6%90%9C%E7%B4%A2%E4%B8%80%E4%B8%AA%E8%8C%83%E5%9B%B4/</link>
      <pubDate>Mon, 19 Mar 2018 10:46:27 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/34-search-for-a-range-%E6%90%9C%E7%B4%A2%E4%B8%80%E4%B8%AA%E8%8C%83%E5%9B%B4/</guid>
      <description>Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.
Your algorithm&amp;rsquo;s runtime complexity must be in the order of O(log n).
If the target is not found in the array, return [-1, -1].
For example, Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].
解法1 这道题让我们在一个有序数组中查找与输入target相同的起始位置和结束位置,限定时间复杂度为O(logn),这个是典型的二分查找时间复杂度.这道题我们先采用二分法找到一个与target相同的index,再想index的左边和右边搜索.
class Solution { public: vector&amp;lt;int&amp;gt; searchRange(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) { int index = search(nums,0,nums.</description>
    </item>
    
    <item>
      <title>33. Search in Rotated Sorted Array 在旋转有序数组中搜索</title>
      <link>http://blog.longpengfei.com/post/33-search-in-rotated-sorted-array-%E5%9C%A8%E6%97%8B%E8%BD%AC%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Tue, 27 Feb 2018 10:38:10 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/33-search-in-rotated-sorted-array-%E5%9C%A8%E6%97%8B%E8%BD%AC%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%90%9C%E7%B4%A2/</guid>
      <description>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
You are given a target value to search. If found in the array return its index, otherwise return -1.
You may assume no duplicate exists in the array.
Difficulty: Medium
这道题让我们求一个旋转有序数组中是否存在一个给定的值,存在返回下标,不存在返回-1.如体重的例子0 1 2 4 5 6 7,我们不知道从哪开始旋转的,他的选择情况有7种</description>
    </item>
    
    <item>
      <title>32. Longest Valid Parentheses 最长有效括号</title>
      <link>http://blog.longpengfei.com/post/32-longest-valid-parentheses-%E6%9C%80%E9%95%BF%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7/</link>
      <pubDate>Mon, 26 Feb 2018 13:27:57 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/32-longest-valid-parentheses-%E6%9C%80%E9%95%BF%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7/</guid>
      <description>Given a string containing just the characters &amp;lsquo;(&amp;rsquo; and &amp;lsquo;)&amp;rsquo;, find the length of the longest valid (well-formed) parentheses substring.
For &amp;ldquo;(()&amp;rdquo;, the longest valid parentheses substring is &amp;ldquo;()&amp;rdquo;, which has length = 2.
Another example is &amp;ldquo;)()())&amp;rdquo;, where the longest valid parentheses substring is &amp;ldquo;()()&amp;rdquo;, which has length = 4.
Difficulty: Hard
这道题比20. Valid Parentheses 验证括号难一些.
解法1 还是利用栈来求解,并定义start记录合法括号串的起始位置.遍历字符串,如果遇到左括号,则将当前下标压栈,如果遇到右括号,如果当前栈为空,则将下一个位置的下标记为start,如果栈不为空,则将栈顶元素取出.此时如果站为空,则更新结果和i-start+1的最大值,否则更新结果为i-栈顶元素的最大值.
class Solution { public: int longestValidParentheses(string s) { int res = 0,start = 0; stack&amp;lt;int&amp;gt; m; for (int i=0;i&amp;lt;s.</description>
    </item>
    
    <item>
      <title>31. Next Permutation 下一个排列</title>
      <link>http://blog.longpengfei.com/post/31-next-permutation-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/</link>
      <pubDate>Mon, 26 Feb 2018 11:02:34 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/31-next-permutation-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/</guid>
      <description>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.
If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).
The replacement must be in-place, do not allocate extra memory.
Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
1,2,3 → 1,3,2 3,2,1 → 1,2,3 1,1,5 → 1,5,1  Difficulty: Medium</description>
    </item>
    
    <item>
      <title>30. Substring With Concatenation of All Words 串联所有单词的子串</title>
      <link>http://blog.longpengfei.com/post/30-substring-with-concatenation-of-all-words-%E4%B8%B2%E8%81%94%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%90%E4%B8%B2/</link>
      <pubDate>Thu, 08 Feb 2018 16:33:52 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/30-substring-with-concatenation-of-all-words-%E4%B8%B2%E8%81%94%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%90%E4%B8%B2/</guid>
      <description>You are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters.
For example, given:
s: &amp;quot;barfoothefoobarman&amp;quot;
words: [&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;]
You should return the indices: [0,9].
(order does not matter).
Difficulty: Hard
这道题让我们求串联所有单词的子串.所有单词来自输入的数组.所有单词的长度一样,串联的顺序不一定.如题中的例子,可以串联成foobar, barfoo. 这里我们用两个哈希表,一个用来存输入单词数组的每个单词和其的出现次数.然后遍历输入的字符串.设单词的个数为n,每个单词长度为m.每次遍历检查母字符串从该位置开始,每m截取一下查看在第一个哈希表是否存在.如果存在,存入第二个哈希表.如果n个次截取都匹配则这次遍历是符合要求的,存一下结果.
解法1 就是上面分析
class Solution { public: vector&amp;lt;int&amp;gt; findSubstring(string s, vector&amp;lt;string&amp;gt;&amp;amp; words) { vector&amp;lt;int&amp;gt;res; if (s.</description>
    </item>
    
    <item>
      <title>29. Divide Two Integers 两数相除</title>
      <link>http://blog.longpengfei.com/post/29-divide-two-integers-%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4/</link>
      <pubDate>Wed, 07 Feb 2018 16:45:36 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/29-divide-two-integers-%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4/</guid>
      <description>Divide two integers without using multiplication, division and mod operator.
If it is overflow, return MAX_INT.
Difficulty: Medium
这道题让我们求两个数相除A/B,并且不让使用乘法,除法,取余运算.这样我们只能优先想到位运算和加减法了. 假设A&amp;gt;B,最容易想到的是把A-B赋值给A,并且结果+1,然后再把A-B赋值给A,结果+1.这样一直下去.不过如果是2147483647/1这种情况不会不会通过OJ,因为效率太低,会提示Time Limit Exceeded,不可行.回头想想上面的位运算还没用到,如果A&amp;gt;2*B那么结果是不是加2,如果A&amp;gt;2*2*2B结果是不是加2*2.定义t为除数,p为结果的计数m为被除数的绝对值,n为除数的绝对值.例如100/2
   t
(除数) p
(计数) res
(结果) m
(被除数) t
(除数) p
(计数) res
(结果) m
(被除数) t
(除数) p
(计数) res
(结果) m
(被除数)     2 1 32 36 2 1 48 4 2 1 50 0   4 2   4 2   4 2     8 4   8 4         16 8   16 8         32 16   32 16         64 32              解法1 class Solution { public: int divide(int dividend, int divisor) { if (divisor==0||(dividend==INT_MIN&amp;amp;&amp;amp;divisor==-1)) return INT_MAX; int sign = ((dividend&amp;lt;0)^(divisor&amp;lt;0))?</description>
    </item>
    
    <item>
      <title>28. Implement strStr() 实现strStr()函数</title>
      <link>http://blog.longpengfei.com/post/28-implement-strstr-%E5%AE%9E%E7%8E%B0strstr%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 06 Feb 2018 11:37:27 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/28-implement-strstr-%E5%AE%9E%E7%8E%B0strstr%E5%87%BD%E6%95%B0/</guid>
      <description>Implement strStr().
Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.
Example 1:
Input: haystack = &amp;quot;hello&amp;quot;, needle = &amp;quot;ll&amp;quot; Output: 2  Example 2:
Input: haystack = &amp;quot;aaaaa&amp;quot;, needle = &amp;quot;bba&amp;quot; Output: -1  Difficulty: Easy
这道题让我们找出字符串中某个子字符串第一次出现的index.如果子字符串的长度为0,则返回0,如果子字符传的长度大于母字符串,则返回-1.遍历字符串的时候只需要遍历到剩下的长度等于字符串的位置即可.
class Solution { public: int strStr(string haystack, string needle) { if (needle.empty()) return 0; int m = haystack.size(),n=needle.size(); if (m&amp;lt;n) return -1; for (int i=0;i&amp;lt;=m-n;++i) { int j=0; for (j=0;j&amp;lt;n;j++) if (haystack[i+j]!</description>
    </item>
    
    <item>
      <title>27. Remove Element 移除元素</title>
      <link>http://blog.longpengfei.com/post/27-remove-element-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</link>
      <pubDate>Tue, 06 Feb 2018 10:46:02 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/27-remove-element-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</guid>
      <description>Given an array and a value, remove all instances of that value in-place and return the new length.
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
The order of elements can be changed. It doesn&amp;rsquo;t matter what you leave beyond the new length.
Example:
Given nums = [3,2,2,3], val = 3, Your function should return length = 2, with the first two elements of nums being 2.</description>
    </item>
    
    <item>
      <title>26. Remove Duplicates From Sorted Array 有序数组中去除重复项</title>
      <link>http://blog.longpengfei.com/post/26-remove-duplicates-from-sorted-array-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E9%A1%B9/</link>
      <pubDate>Tue, 06 Feb 2018 10:18:16 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/26-remove-duplicates-from-sorted-array-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E9%A1%B9/</guid>
      <description>Given a sorted array, remove the duplicates in-place such that each element appear only once and return the new length.
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
Example:
Given nums = [1,1,2], Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn&#39;t matter what you leave beyond the new length.</description>
    </item>
    
    <item>
      <title>25 Reverse Nodes in K Group 每k个一组翻转链表</title>
      <link>http://blog.longpengfei.com/post/25-reverse-nodes-in-k-group-%E6%AF%8Fk%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Mon, 05 Feb 2018 11:36:38 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/25-reverse-nodes-in-k-group-%E6%AF%8Fk%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</guid>
      <description>Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.
You may not alter the values in the nodes, only nodes itself may be changed.</description>
    </item>
    
    <item>
      <title>24. Swap Nodes in Pairs 成对交换节点</title>
      <link>http://blog.longpengfei.com/post/24-swap-nodes-in-pairs-%E6%88%90%E5%AF%B9%E4%BA%A4%E6%8D%A2%E8%8A%82%E7%82%B9/</link>
      <pubDate>Sun, 04 Feb 2018 13:56:46 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/24-swap-nodes-in-pairs-%E6%88%90%E5%AF%B9%E4%BA%A4%E6%8D%A2%E8%8A%82%E7%82%B9/</guid>
      <description>Given a linked list, swap every two adjacent nodes and return its head.
For example, Given 1-&amp;gt;2-&amp;gt;3-&amp;gt;4, you should return the list as 2-&amp;gt;1-&amp;gt;4-&amp;gt;3.
Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.
Difficulty: Medium
解法1 迭代.建立dummy结点(注意之后释放该结点),拿1,2,3,4举例,第一次循环pre=dummy,将1指向3,将2指向1,再将pre设为1
class Solution { public: ListNode* swapPairs(ListNode* head) { ListNode *dummy = new ListNode(-1),*pre = dummy; dummy-&amp;gt;next = head; while (pre-&amp;gt;next &amp;amp;&amp;amp; pre-&amp;gt;next-&amp;gt;next) { // t=2 ListNode* t = pre-&amp;gt;next-&amp;gt;next; // 1 -&amp;gt;(指向next) 3 pre-&amp;gt;next-&amp;gt;next = t-&amp;gt;next; // 2 -&amp;gt; 1 t-&amp;gt;next = pre-&amp;gt;next; // pre(dummy) -&amp;gt; t pre-&amp;gt;next = t; // pre = 1 pre = t-&amp;gt;next; //所以第一次while循环后的结果为 //dummy-&amp;gt; t(2) -&amp;gt; 1 -&amp;gt; 3 //pre = 1 然后到下一次循环 } ListNode* res = dummy-&amp;gt;next; delete dummy; dummy = NULL; return res; } };  解法2 递归,先递归到最后两个进行交换,再依次向前迭代.</description>
    </item>
    
    <item>
      <title>23. Merge K Sorted Lists 合并k个有序链表</title>
      <link>http://blog.longpengfei.com/post/23-merge-k-sorted-lists-%E5%90%88%E5%B9%B6k%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Wed, 31 Jan 2018 10:59:05 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/23-merge-k-sorted-lists-%E5%90%88%E5%B9%B6k%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</guid>
      <description>Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.
Difficulty: Hard
合并k个排序列表.是前面21. Merge Two Sorted Lists 混合插入有序链表的升级版.
解法1 最先想到的就是利用21. Merge Two Sorted Lists 混合插入有序链表拿第一个链表与第二个合并,合并结果在于第三个比较.这样需要合并k-1次才能完成.
/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ class Solution { public: ListNode* mergeKLists(vector&amp;lt;ListNode*&amp;gt;&amp;amp; lists) { int n = lists.</description>
    </item>
    
    <item>
      <title>22. Generate Parentheses 生成括号</title>
      <link>http://blog.longpengfei.com/post/22-generate-parentheses-%E7%94%9F%E6%88%90%E6%8B%AC%E5%8F%B7/</link>
      <pubDate>Tue, 30 Jan 2018 14:36:53 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/22-generate-parentheses-%E7%94%9F%E6%88%90%E6%8B%AC%E5%8F%B7/</guid>
      <description>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
For example, given n = 3, a solution set is:
[ &amp;quot;((()))&amp;quot;, &amp;quot;(()())&amp;quot;, &amp;quot;(())()&amp;quot;, &amp;quot;()(())&amp;quot;, &amp;quot;()()()&amp;quot; ]  Difficulty: Medium
这道题让我们列举出所有的括号字符串,前面还有一题20. Valid Parentheses 验证括号也是关于括号的.这里让列举出所有可能,可以优先考虑递归和DFS.定义left,right分别表示剩余左括号的数量和剩余的右括号的数量.如果在某次的递归中,left&amp;gt;right说明在已经生成的字符串中右括号的数量大于左括号的数量,是不合理的.当left,right都为0的时候,说明已经生成一个可用的括号串.其实这里有DFS的思想.为什么呢.看看下面是怎样递归的顺序,以题目给的例子n=3.
( (( ((( ((() ((()) ((())) (()()) ~ ()()()  DFS(深度优先),这里可以想象成左括号优先
解法1 就是上面分析的解法
class Solution { public: vector&amp;lt;string&amp;gt; generateParenthesis(int n) { vector&amp;lt;string&amp;gt; res; generateParenthesisDFS(n,n,&amp;quot;&amp;quot;,res); return res; } void generateParenthesisDFS(int left,int right,string out,vector&amp;lt;string&amp;gt;&amp;amp; res) { if (left&amp;gt;right) return; if (left==0 &amp;amp;&amp;amp; right==0) res.</description>
    </item>
    
    <item>
      <title>21. Merge Two Sorted Lists 混合插入有序链表</title>
      <link>http://blog.longpengfei.com/post/21-merge-two-sorted-lists-%E6%B7%B7%E5%90%88%E6%8F%92%E5%85%A5%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 30 Jan 2018 11:42:00 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/21-merge-two-sorted-lists-%E6%B7%B7%E5%90%88%E6%8F%92%E5%85%A5%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</guid>
      <description>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.
Example:
Input: 1-&amp;gt;2-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4 Output: 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4  Difficulty: Easy
这道题让我们把两个有序的链表合并成一个有序的链表,与剑指offer 16题完全相同.
解法1 按照剑指offer 16题的递归解法
/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ class Solution { public: ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) { if (l1==NULL) return l2; if (l2==NULL) return l1; ListNode* head = NULL; if (l1-&amp;gt;val&amp;lt;l2-&amp;gt;val) { head = l1; head-&amp;gt;next = mergeTwoLists(l1-&amp;gt;next,l2); } else { head = l2; head-&amp;gt;next = mergeTwoLists(l2-&amp;gt;next,l1); } return head; } };  解法2 采用循环的方式</description>
    </item>
    
    <item>
      <title>20. Valid Parentheses 验证括号</title>
      <link>http://blog.longpengfei.com/post/20-valid-parentheses-%E9%AA%8C%E8%AF%81%E6%8B%AC%E5%8F%B7/</link>
      <pubDate>Mon, 29 Jan 2018 18:57:44 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/20-valid-parentheses-%E9%AA%8C%E8%AF%81%E6%8B%AC%E5%8F%B7/</guid>
      <description>Given a string containing just the characters &#39;(&#39;, &#39;)&#39;, &#39;{&#39;, &#39;}&#39;, &#39;[&#39; and &#39;]&#39;, determine if the input string is valid.
The brackets must close in the correct order, &amp;quot;()&amp;quot; and &amp;quot;()[]{}&amp;quot; are all valid but &amp;quot;(]&amp;quot; and &amp;quot;([)]&amp;quot; are not.
Difficulty: Easy
这道题让我们验证字符串是否是可用的括号,这个字符串只有括号.需要用到栈,当遇到左括号的时候压入到栈里,遇到右括号的时候需要检查栈顶元素是否为对应的左括号,如果不是对应的就返回false.
class Solution { public: bool isValid(string s) { stack&amp;lt;char&amp;gt; parentheses; for (int i = 0; i&amp;lt;s.size();i++){ if (s[i]==&#39;(&#39;||s[i]==&#39;[&#39;||s[i]==&#39;{&#39;) parentheses.push(s[i]); else { if (parentheses.empty()) return false; if (s[i]==&#39;)&#39; &amp;amp;&amp;amp; parentheses.</description>
    </item>
    
    <item>
      <title>19. Remove Nth Node From End of List 移除链表倒数第N个节点</title>
      <link>http://blog.longpengfei.com/post/19-remove-nth-node-from-end-of-list-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E8%8A%82%E7%82%B9/</link>
      <pubDate>Mon, 29 Jan 2018 18:08:29 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/19-remove-nth-node-from-end-of-list-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E8%8A%82%E7%82%B9/</guid>
      <description>Given a linked list, remove the nth node from the end of list and return its head.
For example,
 Given linked list: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, and n = 2. After removing the second node from the end, the linked list becomes 1-&amp;gt;2-&amp;gt;3-&amp;gt;5.  Note:
Given n will always be valid. Try to do this in one pass.
Difficulty: Medium
这道题让我们溢出链表中第N个节点,并制定n为有效的,就是n不会大于链表元素的总个数.看网上说这道题在问的时候可能会加上限制在一次循环的条件完成.如果用一次循环完成的话,就不能单独用一次循环来求链表元素的个数,要在循环到要删除的元素的位置时就该删除该元素.所以需要一点技巧. 我们可以定义两个指针pre,cur.先让cur前进N步,如果此时cur指向的为NULL,说明该链表的长度为N,所以移除首个元素就可以.如果cur指向的不为NULL,那么此时同时让pre,cur同时前进,直到cur指向最后一个元素,此时pre指向的就是倒数第N个元素,删除即可.
剑指offer 56题与这道题稍微有点像,可以一起看下
/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ class Solution { public: ListNode* removeNthFromEnd(ListNode* head, int n) { if (!</description>
    </item>
    
    <item>
      <title>18. 4Sum 四数之和</title>
      <link>http://blog.longpengfei.com/post/18-4sum-%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Mon, 29 Jan 2018 17:08:47 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/18-4sum-%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.
Note: The solution set must not contain duplicate quadruplets.
For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0. A solution set is: [ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2] ]  Difficulty: Medium</description>
    </item>
    
    <item>
      <title>17. Letter Combinations of a Phone Number 电话号码的字母组合</title>
      <link>http://blog.longpengfei.com/post/17-letter-combinations-of-a-phone-number-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</link>
      <pubDate>Mon, 29 Jan 2018 14:33:03 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/17-letter-combinations-of-a-phone-number-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</guid>
      <description>Given a digit string, return all possible letter combinations that the number could represent.
A mapping of digit to letters (just like on the telephone buttons) is given below.
Input: Digit string &amp;quot;23&amp;quot; Output: [&amp;quot;ad&amp;quot;, &amp;quot;ae&amp;quot;, &amp;quot;af&amp;quot;, &amp;quot;bd&amp;quot;, &amp;quot;be&amp;quot;, &amp;quot;bf&amp;quot;, &amp;quot;cd&amp;quot;, &amp;quot;ce&amp;quot;, &amp;quot;cf&amp;quot;].  Note:
Although the above answer is in lexicographical order, your answer could be in any order you want.
这道题让我们求电话号码的字母组合, 既2~9中,每个数字都代表2到3个字母,然后给出一个数字的字符串,求出这串数字可能代表的所有字母串.这道题可以用DFS的思想解决,关于DFS可以看二叉树 深度优先搜索（DFS）、广度优先搜索（BFS）,可以简单的了解一下.那为什么说是DFS思想呢,比如给出&amp;rdquo;2345&amp;rdquo;,那个对应的结果为adgj,adgk,adgl,adhj,adhk,adhl...cfil这个顺序可以看做DFS的思想.大概这个意思.
解法1 解法1就是上面的分析的解法.
class Solution { public: vector&amp;lt;string&amp;gt; letterCombinations(string digits) { vector&amp;lt;string&amp;gt; res; if (digits.</description>
    </item>
    
    <item>
      <title>16. 3Sum Closest 最近三数之和</title>
      <link>http://blog.longpengfei.com/post/16-3sum-closest-%E6%9C%80%E8%BF%91%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Mon, 29 Jan 2018 10:09:16 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/16-3sum-closest-%E6%9C%80%E8%BF%91%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.
 For example, given array S = {-1 2 1 -4}, and target = 1. The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</description>
    </item>
    
    <item>
      <title>15. 3Sum 三数之和</title>
      <link>http://blog.longpengfei.com/post/15-3sum-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Sat, 27 Jan 2018 17:52:39 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/15-3sum-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.
Note: The solution set must not contain duplicate triplets.
For example, given array S = [-1, 0, 1, 2, -1, -4], A solution set is: [ [-1, 0, 1], [-1, -1, 2] ]  这道题比Two Sum 两数之和等于一个输入的数复杂一些.</description>
    </item>
    
    <item>
      <title>14. Longest Common Prefix 最长共同前缀</title>
      <link>http://blog.longpengfei.com/post/14-longest-common-prefix-%E6%9C%80%E9%95%BF%E5%85%B1%E5%90%8C%E5%89%8D%E7%BC%80/</link>
      <pubDate>Sat, 27 Jan 2018 16:43:30 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/14-longest-common-prefix-%E6%9C%80%E9%95%BF%E5%85%B1%E5%90%8C%E5%89%8D%E7%BC%80/</guid>
      <description>Write a function to find the longest common prefix string amongst an array of strings.
Difficulty: Easy
可以把输入的字符串数组,看成一个char的二维数组,定义指针i,j分别代表行数和列数,逐列查找,如果char[i][j]不等于char[0][j]或者第i个字符串的长度小于j就可以返回之前的结果了.
class Solution { public: string longestCommonPrefix(vector&amp;lt;string&amp;gt;&amp;amp; strs) { if (strs.empty()) return &amp;quot;&amp;quot;; string res = &amp;quot;&amp;quot;; for (int j=0;j&amp;lt;strs[0].size();j++) { char c = strs[0][j]; for (int i=1;i&amp;lt;strs.size();i++) { if (j&amp;gt;=strs[i].size() || strs[i][j]!=c) return res; } res += c; } return res; } };  </description>
    </item>
    
    <item>
      <title>13. Roman to Integer 罗马数字转化成整数</title>
      <link>http://blog.longpengfei.com/post/13-roman-to-integer-%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E5%8C%96%E6%88%90%E6%95%B4%E6%95%B0/</link>
      <pubDate>Sat, 27 Jan 2018 15:09:37 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/13-roman-to-integer-%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E5%8C%96%E6%88%90%E6%95%B4%E6%95%B0/</guid>
      <description>Given a roman numeral, convert it to an integer.
Input is guaranteed to be within the range from 1 to 3999.
Difficulty: Easy
这道题是把罗马数字转化成整数,和12. Integer to Roman 整数转罗马数字正好反着.关于罗马数字的简单介绍可以回看12. Integer to Roman 整数转罗马数字.
这道题明确告诉我们输入的是罗马数字,所有不需要验证是否为罗马数字.下面只需要考虑
 如果当前数字是最后一个数字,或之后的数字比它小的话,则加上当前的数字.举个反例CD-400,D比C大,所以先减去C(100)再加上D(500),就得到结果400 其他情况则减去这个数字  #include &amp;lt;unordered_map&amp;gt; using namespace std; class Solution { public: int romanToInt(string s) { int res = 0; unordered_map&amp;lt;char, int&amp;gt; m{{&#39;I&#39;,1},{&#39;V&#39;,5},{&#39;X&#39;,10},{&#39;L&#39;,50},{&#39;C&#39;,100},{&#39;D&#39;,500},{&#39;M&#39;,1000}}; for (int i = 0; i &amp;lt; s.size(); i++) { int val = m[s[i]]; //m[s[i+1]]不需要考虑越界,因为有&#39;\0&#39; m[&#39;\0&#39;]=0 if (i == s.</description>
    </item>
    
    <item>
      <title>目录</title>
      <link>http://blog.longpengfei.com/post/leetcode-catalog/</link>
      <pubDate>Fri, 26 Jan 2018 18:24:41 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/leetcode-catalog/</guid>
      <description>Number
题号 Problems
题目 Difficulty
难度 Topics(Tags)
标签     1 Two Sum 两数之和等于一个输入的数 Easy Array, Hash Table   2 Add TwoNumbers 两个链表相加 Medium Linked List, Math   3 Longest Substring Without Repeating Characters 子字符串的最大不重复长度 Medium Hash Table, Two Pointers, String   4 Median of Two Sorted Arrays两个数组的中位数 Hard Array, Binary Search, Divide and Conquer   5 Longest Palindromic Substring 最长回文子字符串 Medium String, Dynamic Programming   6 ZigZag Conversion 之子形转换字符串 Medium String   7 Reverse Integer 翻转整数 Easy Math   8 String to Integer Atoi 把字符串转换成整数 Medium String, Math   9 Palindrome Number 验证回文数字 Easy Math   10 Regular Expression Matching 正则表达式匹配 Hard String, Dynamic Programming, Backtracking   11 Container With Most Water 装最多水的容器 Medium Array, Hash Table   12 Integer to Roman 整数转罗马数字 Medium String, Math   13 Roman to Integer 罗马数字转化成整数 Easy String, Math   14 Longest Common Prefix 最长共同前缀 Easy String   15 3Sum 三数之和 Medium Array, Two Pointers   16 3Sum Closest 最近三数之和 Medium Array, Two Pointers   17 Letter Combinations of a Phone Number 电话号码的字母组合 Medium String, Backtracking, DFS   18 4Sum 四数之和 Medium Array, Hash Table, Two Pointers   19 Remove Nth Node From End of List 移除链表倒数第N个节点 Medium Linked List, Two Pointers   20 Valid Parentheses 验证括号 Easy String, Stack   21 Merge Two Sorted Lists 混合插入有序链表 Easy Linked List   22 Generate Parentheses 生成括号 Medium String, Backtracking, DFS   23 Merge K Sorted Lists 合并k个有序链表 Hard Linked List, Divide and Conquer, Heap   24 Swap Nodes in Pairs 成对交换节点 Medium Linked List   25 Reverse Nodes in K Group 每k个一组翻转链表 Hard Linked List   26 Remove Duplicates From Sorted Array 有序数组中去除重复项 Easy Array, Two Pointers   27 Remove Element 移除元素 Easy Array, Two Pointers   28 Implement strStr() 实现strStr()函数 Easy Two Pointers, String   29 Divide Two Integers 两数相除 Medium Math , Binary Search   30 Substring With Concatenation of All Words 串联所有单词的子串 Hard Hash Table, Two Pointers, String   31 Next Permutation 下一个排列 Medium Array   32 Longest Valid Parentheses 最长有效括号 Hard String, Dynamic Programming   33 Search in Rotated Sorted Array 在旋转有序数组中搜索 Medium Array, Binary Search   34 Search for a Range 搜索一个范围 Medium Array, Binary Search   35 Search Insert Position 搜索插入位置 Easy Array, Binary Search   36 Valid Sudoku 验证数独 Medium Hash Table   37 Sudoku Solver 求数独的一个解 Hard Backtracking,Hash Table   38 Count and Say 计数和读法 Easy String   39 Combination Sum 组合之和 Medium Array, Backtracking   40 Combination Sum II 组合之和之二 Medium Array, Backtracking   41 First Missing Positive 首个缺失的正数 Hard Array   42 Trapping Rain Water 收集雨水 Hard Array, Two Pointers, Stack   43 Multiply Strings 字符串相乘 Medium String, Math   44 Wildcard Matching 通配符匹配 Hard Math, Dynamic Programming, Backtracking, Greedy   45 Jump Game 2 跳跃游戏2 Hard Array, Greedy   46 Permutations 全排列 Medium Backtracking   47 PermutationsII 全排列2 Medium Backtracking   48 Rotate Image 旋转图像 Medium Array   49 Group Anagrams 群组错位词 Medium String,Hash Table   50 Pow(x, n) 求x的n次方 Medium Math, Binary Search   146 LRU Cache 最近最少使用置换缓存器 Hard Design</description>
    </item>
    
    <item>
      <title>12. Integer to Roman 整数转罗马数字</title>
      <link>http://blog.longpengfei.com/post/12-integer-to-roman-%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/</link>
      <pubDate>Fri, 26 Jan 2018 16:42:56 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/12-integer-to-roman-%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/</guid>
      <description>Given an integer, convert it to a roman numeral.
Input is guaranteed to be within the range from 1 to 3999.
Difficulty: Medium
罗马字符:	I	V	X	L	C	D	M 阿拉伯数字:	1	5	10	50	100	500	1000 1~9 : I, II, III, IV, V, VI, VII, VIII, IX 10~90 : X, XX, XXX, XL, L, LX, LXX, LXXX, XC 100~900: C, CC, CCC, CD, D, DC, DCC, DCCC, CM 1000~3000: M, MM, MMM  例如: 整数1437的罗马数字为MCDXXXVII.</description>
    </item>
    
    <item>
      <title>11. Container With Most Water 装最多水的容器</title>
      <link>http://blog.longpengfei.com/post/11-container-with-most-water-%E8%A3%85%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Fri, 26 Jan 2018 14:14:50 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/11-container-with-most-water-%E8%A3%85%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</guid>
      <description>Given n non-negative integers a1, a2, &amp;hellip;, an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.
Note: You may not slant the container and n is at least 2.
Difficulty: Medium</description>
    </item>
    
    <item>
      <title>10. Regular Expression Matching 正则表达式匹配</title>
      <link>http://blog.longpengfei.com/post/10-regular-expression-matching-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Wed, 24 Jan 2018 18:51:58 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/10-regular-expression-matching-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</guid>
      <description>Implement regular expression matching with support for &#39;.&#39; and &#39;*&#39;.
&#39;.&#39; Matches any single character. &#39;*&#39; Matches zero or more of the preceding element. The matching should cover the entire input string (not partial). The function prototype should be: bool isMatch(const char *s, const char *p) Some examples: isMatch(&amp;quot;aa&amp;quot;,&amp;quot;a&amp;quot;) → false isMatch(&amp;quot;aa&amp;quot;,&amp;quot;aa&amp;quot;) → true isMatch(&amp;quot;aaa&amp;quot;,&amp;quot;aa&amp;quot;) → false isMatch(&amp;quot;aa&amp;quot;, &amp;quot;a*&amp;quot;) → true isMatch(&amp;quot;aa&amp;quot;, &amp;quot;.*&amp;quot;) → true isMatch(&amp;quot;ab&amp;quot;, &amp;quot;.*&amp;quot;) → true isMatch(&amp;quot;aab&amp;quot;, &amp;quot;c*a*b&amp;quot;) → true  Difficulty: Hard</description>
    </item>
    
    <item>
      <title>9. Palindrome Number 验证回文数字</title>
      <link>http://blog.longpengfei.com/post/9-palindrome-number-%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E6%95%B0%E5%AD%97/</link>
      <pubDate>Wed, 24 Jan 2018 17:04:38 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/9-palindrome-number-%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E6%95%B0%E5%AD%97/</guid>
      <description>Determine whether an integer is a palindrome. Do this without extra space.
Some hints: Could negative integers be palindromes? (ie, -1)
If you are thinking of converting the integer to string, note the restriction of using extra space.
You could also try reversing an integer. However, if you have solved the problem &amp;ldquo;Reverse Integer&amp;rdquo;, you know that the reversed integer might overflow. How would you handle such case?
There is a more generic way of solving this problem.</description>
    </item>
    
    <item>
      <title>8 String to Integer Atoi 把字符串转换成整数</title>
      <link>http://blog.longpengfei.com/post/8-string-to-integer-atoi-%E6%8A%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%88%90%E6%95%B4%E6%95%B0/</link>
      <pubDate>Wed, 24 Jan 2018 12:40:36 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/8-string-to-integer-atoi-%E6%8A%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%88%90%E6%95%B4%E6%95%B0/</guid>
      <description>Implement atoi to convert a string to an integer.
Hint: Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.
Notes: It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front.
Difficulty: Medium
把字符串转换成整数,和剑指offer 49题相似,不过这里的要求比较多,实现atoi
 判断开头是否有空格 判断开头是否有 &#39;+&#39;,&#39;-&#39; 如果遇到非法字符返回已有的结果 如果超过边界,返回边界值  class Solution { public: int myAtoi(string str) { int len = str.</description>
    </item>
    
    <item>
      <title>7 Reverse Integer 翻转整数</title>
      <link>http://blog.longpengfei.com/post/7-reverse-integer-%E7%BF%BB%E8%BD%AC%E6%95%B4%E6%95%B0/</link>
      <pubDate>Wed, 24 Jan 2018 10:40:15 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/7-reverse-integer-%E7%BF%BB%E8%BD%AC%E6%95%B4%E6%95%B0/</guid>
      <description>Given a 32-bit signed integer, reverse digits of an integer.
Example 1:
Input: 123 Output: 321  Example 2:
Input: -123 Output: -321  Example 3:
Input: 120 Output: 21  Note: Assume we are dealing with an environment which could only hold integers within the 32-bit signed integer range. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
分析 Difficulty: Easy</description>
    </item>
    
    <item>
      <title>6 ZigZag Conversion 之子形转换字符串</title>
      <link>http://blog.longpengfei.com/post/6-zigzag-conversion-%E4%B9%8B%E5%AD%90%E5%BD%A2%E8%BD%AC%E6%8D%A2%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Tue, 23 Jan 2018 17:43:43 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/6-zigzag-conversion-%E4%B9%8B%E5%AD%90%E5%BD%A2%E8%BD%AC%E6%8D%A2%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>The string &amp;quot;PAYPALISHIRING&amp;quot; is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)
P A H N A P L S I I G Y I R  And then read line by line: &amp;quot;PAHNAPLSIIGYIR&amp;quot; Write the code that will take a string and make this conversion given a number of rows:</description>
    </item>
    
    <item>
      <title>Longest Palindromic Substring 最长回文子字符串</title>
      <link>http://blog.longpengfei.com/post/longest-palindromic-substring-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Mon, 15 Jan 2018 17:03:21 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/longest-palindromic-substring-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.
Difficulty:Medium
Example:
Input: &amp;quot;babad&amp;quot; Output: &amp;quot;bab&amp;quot; Note: &amp;quot;aba&amp;quot; is also a valid answer.  Example:
Input: &amp;quot;cbbd&amp;quot; Output: &amp;quot;bb&amp;quot;  这道题参考Grandyang,他博客里有全套leetcode讲解.
求最长回文串,回文串就是正着读反着读都一样的字符串.下面的解法是以一个字符为中心向两边扩散并比较 
解法1: O(n^2) class Solution { public: public: string longestPalindrome(string s) { int startIdx = 0, left = 0, right = 0, len = 0; for (int i = 0; i &amp;lt; s.</description>
    </item>
    
    <item>
      <title>Median of Two Sorted Arrays两个数组的中位数</title>
      <link>http://blog.longpengfei.com/post/median-of-two-sorted-arrays%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</link>
      <pubDate>Sat, 13 Jan 2018 15:45:29 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/median-of-two-sorted-arrays%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</guid>
      <description>There are two sorted arrays nums1 and nums2 of size m and n respectively.
Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).
Example1:
nums1 = [1, 3] nums2 = [2] The median is 2.0  Example2
nums1 = [1, 2] nums2 = [3, 4] The median is (2 + 3)/2 = 2.5  分析 解法一:
思路来自Very concise O(log(min(M,N))) iterative solution with detailed explanation 看到O(log (m+n))一般来说就是分治法或是二分搜索,一个数组(长度为N)在中间切一刀,那它左边的索引L为(N-1)/2,右边的索引R为N/2.</description>
    </item>
    
    <item>
      <title>Longest Substring Without Repeating Characters 子字符串的最大不重复长度</title>
      <link>http://blog.longpengfei.com/post/longest-substring-without-repeating-characters-%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E5%A4%A7%E4%B8%8D%E9%87%8D%E5%A4%8D%E9%95%BF%E5%BA%A6/</link>
      <pubDate>Fri, 12 Jan 2018 11:41:10 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/longest-substring-without-repeating-characters-%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E5%A4%A7%E4%B8%8D%E9%87%8D%E5%A4%8D%E9%95%BF%E5%BA%A6/</guid>
      <description>Given a string, find the length of the longest substring without repeating characters.
Examples:
Given &amp;quot;abcabcbb&amp;quot;, the answer is &amp;quot;abc&amp;quot;, which the length is 3.
Given &amp;quot;bbbbb&amp;quot;, the answer is &amp;quot;b&amp;quot;, with the length of 1.
Given &amp;quot;pwwkew&amp;quot;, the answer is &amp;quot;wke&amp;quot;, with the length of 3. Note that the answer must be a substring, &amp;quot;pwke&amp;quot; is a subsequence and not a substring.
滑动窗口问题,比如abcabcbb,滑动到abca的时候需要丢弃第一个a变成bca,继续向右滑动,每次滑动都要检查有没有重复.感觉涉及到最大,最多的问题都可以试着网哈希表上靠. 
class Solution { public: int lengthOfLongestSubstring(string s) { int size = s.</description>
    </item>
    
    <item>
      <title>Add TwoNumbers 两个链表相加</title>
      <link>http://blog.longpengfei.com/post/add-twonumbers-%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%8A%A0/</link>
      <pubDate>Wed, 10 Jan 2018 21:39:18 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/add-twonumbers-%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%8A%A0/</guid>
      <description>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Example
Input: (2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4) Output: 7 -&amp;gt; 0 -&amp;gt; 8 Explanation: 342 + 465 = 807.</description>
    </item>
    
    <item>
      <title>Two Sum 两数之和等于一个输入的数</title>
      <link>http://blog.longpengfei.com/post/two-sum-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%E7%AD%89%E4%BA%8E%E4%B8%80%E4%B8%AA%E8%BE%93%E5%85%A5%E7%9A%84%E6%95%B0/</link>
      <pubDate>Wed, 10 Jan 2018 19:21:32 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/two-sum-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%E7%AD%89%E4%BA%8E%E4%B8%80%E4%B8%AA%E8%BE%93%E5%85%A5%E7%9A%84%E6%95%B0/</guid>
      <description>Given an array of integers, return indices of the two numbers such that they add up to a specific target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
Example:
Given nums = [2, 7, 11, 15], target = 9, Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1].  要返回数组中两个数的索引,这两个数的和等于输入的数.最简单的两层for循环可定不能满足要求.考虑优化时间复杂度,可尝试牺牲时间复杂度. stack?queue?vector?还是hash_map.stack,queue,vector查找都是O(n),hash_map为O(1).接下来尝试用hash_map解决问题. 
class Solution { public: vector&amp;lt;int&amp;gt; twoSum(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) { vector&amp;lt;int&amp;gt;res; if(nums.</description>
    </item>
    
  </channel>
</rss>