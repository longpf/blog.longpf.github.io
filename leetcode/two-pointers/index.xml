<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Two Pointers on long·pf</title>
    <link>http://blog.longpengfei.com/leetcode/two-pointers/</link>
    <description>Recent content in Two Pointers on long·pf</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2018. All rights reserved.</copyright>
    <lastBuildDate>Tue, 06 Feb 2018 10:46:02 +0800</lastBuildDate>
    
	<atom:link href="http://blog.longpengfei.com/leetcode/two-pointers/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>27. Remove Element 移除元素</title>
      <link>http://blog.longpengfei.com/post/27-remove-element-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</link>
      <pubDate>Tue, 06 Feb 2018 10:46:02 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/27-remove-element-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</guid>
      <description>Given an array and a value, remove all instances of that value in-place and return the new length.
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
The order of elements can be changed. It doesn&amp;rsquo;t matter what you leave beyond the new length.
Example:
Given nums = [3,2,2,3], val = 3, Your function should return length = 2, with the first two elements of nums being 2.</description>
    </item>
    
    <item>
      <title>26. Remove Duplicates From Sorted Array 有序数组中去除重复项</title>
      <link>http://blog.longpengfei.com/post/26-remove-duplicates-from-sorted-array-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E9%A1%B9/</link>
      <pubDate>Tue, 06 Feb 2018 10:18:16 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/26-remove-duplicates-from-sorted-array-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E9%A1%B9/</guid>
      <description>Given a sorted array, remove the duplicates in-place such that each element appear only once and return the new length.
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
Example:
Given nums = [1,1,2], Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn&#39;t matter what you leave beyond the new length.</description>
    </item>
    
    <item>
      <title>19. Remove Nth Node From End of List 移除链表倒数第N个节点</title>
      <link>http://blog.longpengfei.com/post/19-remove-nth-node-from-end-of-list-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E8%8A%82%E7%82%B9/</link>
      <pubDate>Mon, 29 Jan 2018 18:08:29 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/19-remove-nth-node-from-end-of-list-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E8%8A%82%E7%82%B9/</guid>
      <description>Given a linked list, remove the nth node from the end of list and return its head.
For example,
 Given linked list: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, and n = 2. After removing the second node from the end, the linked list becomes 1-&amp;gt;2-&amp;gt;3-&amp;gt;5.  Note:
Given n will always be valid. Try to do this in one pass.
Difficulty: Medium
这道题让我们溢出链表中第N个节点,并制定n为有效的,就是n不会大于链表元素的总个数.看网上说这道题在问的时候可能会加上限制在一次循环的条件完成.如果用一次循环完成的话,就不能单独用一次循环来求链表元素的个数,要在循环到要删除的元素的位置时就该删除该元素.所以需要一点技巧. 我们可以定义两个指针pre,cur.先让cur前进N步,如果此时cur指向的为NULL,说明该链表的长度为N,所以移除首个元素就可以.如果cur指向的不为NULL,那么此时同时让pre,cur同时前进,直到cur指向最后一个元素,此时pre指向的就是倒数第N个元素,删除即可.
剑指offer 56题与这道题稍微有点像,可以一起看下
/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ class Solution { public: ListNode* removeNthFromEnd(ListNode* head, int n) { if (!</description>
    </item>
    
    <item>
      <title>18. 4Sum 四数之和</title>
      <link>http://blog.longpengfei.com/post/18-4sum-%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Mon, 29 Jan 2018 17:08:47 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/18-4sum-%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.
Note: The solution set must not contain duplicate quadruplets.
For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0. A solution set is: [ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2] ]  Difficulty: Medium</description>
    </item>
    
    <item>
      <title>15. 3Sum 三数之和</title>
      <link>http://blog.longpengfei.com/post/15-3sum-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Sat, 27 Jan 2018 17:52:39 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/15-3sum-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.
Note: The solution set must not contain duplicate triplets.
For example, given array S = [-1, 0, 1, 2, -1, -4], A solution set is: [ [-1, 0, 1], [-1, -1, 2] ]  这道题比Two Sum 两数之和等于一个输入的数复杂一些.</description>
    </item>
    
    <item>
      <title>11. Container With Most Water 装最多水的容器</title>
      <link>http://blog.longpengfei.com/post/11-container-with-most-water-%E8%A3%85%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Fri, 26 Jan 2018 14:14:50 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/11-container-with-most-water-%E8%A3%85%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</guid>
      <description>Given n non-negative integers a1, a2, &amp;hellip;, an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.
Note: You may not slant the container and n is at least 2.
Difficulty: Medium</description>
    </item>
    
    <item>
      <title>Longest Substring Without Repeating Characters 子字符串的最大不重复长度</title>
      <link>http://blog.longpengfei.com/post/longest-substring-without-repeating-characters-%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E5%A4%A7%E4%B8%8D%E9%87%8D%E5%A4%8D%E9%95%BF%E5%BA%A6/</link>
      <pubDate>Fri, 12 Jan 2018 11:41:10 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/longest-substring-without-repeating-characters-%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E5%A4%A7%E4%B8%8D%E9%87%8D%E5%A4%8D%E9%95%BF%E5%BA%A6/</guid>
      <description>Given a string, find the length of the longest substring without repeating characters.
Examples:
Given &amp;quot;abcabcbb&amp;quot;, the answer is &amp;quot;abc&amp;quot;, which the length is 3.
Given &amp;quot;bbbbb&amp;quot;, the answer is &amp;quot;b&amp;quot;, with the length of 1.
Given &amp;quot;pwwkew&amp;quot;, the answer is &amp;quot;wke&amp;quot;, with the length of 3. Note that the answer must be a substring, &amp;quot;pwke&amp;quot; is a subsequence and not a substring.
滑动窗口问题,比如abcabcbb,滑动到abca的时候需要丢弃第一个a变成bca,继续向右滑动,每次滑动都要检查有没有重复.感觉涉及到最大,最多的问题都可以试着网哈希表上靠. 
class Solution { public: int lengthOfLongestSubstring(string s) { int size = s.</description>
    </item>
    
  </channel>
</rss>