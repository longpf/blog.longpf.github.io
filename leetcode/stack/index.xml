<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stack on long·pf</title>
    <link>http://blog.longpengfei.com/leetcode/stack/</link>
    <description>Recent content in Stack on long·pf</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2018. All rights reserved.</copyright>
    <lastBuildDate>Thu, 19 Jul 2018 11:28:13 +0800</lastBuildDate>
    
	<atom:link href="http://blog.longpengfei.com/leetcode/stack/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>42. Trapping Rain Water 收集雨水</title>
      <link>http://blog.longpengfei.com/post/42-trapping-rain-water-%E6%94%B6%E9%9B%86%E9%9B%A8%E6%B0%B4/</link>
      <pubDate>Thu, 19 Jul 2018 11:28:13 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/42-trapping-rain-water-%E6%94%B6%E9%9B%86%E9%9B%A8%E6%B0%B4/</guid>
      <description>Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.
The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example:
Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6  解法1 这道题给出一个数组,每个元素是一个宽为1的bar,问这些bar组成的图行最多能装多少水,就是图上蓝色的部分.如果当前位置高度大于两边的高度,我们就认为当前位置对结果有贡献.当前位置的贡献值,为左边高度的最大值和右边高度的最大值,取其中最小的和当前的高度相减.
class Solution { public: int trap(vector&amp;lt;int&amp;gt;&amp;amp; height) { //level是已经安全的水位 int l=0,r=height.size()-1,level=0,water=0; while(l &amp;lt; r){ int lower = height[height[l]&amp;lt;height[r]?</description>
    </item>
    
    <item>
      <title>20. Valid Parentheses 验证括号</title>
      <link>http://blog.longpengfei.com/post/20-valid-parentheses-%E9%AA%8C%E8%AF%81%E6%8B%AC%E5%8F%B7/</link>
      <pubDate>Mon, 29 Jan 2018 18:57:44 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/20-valid-parentheses-%E9%AA%8C%E8%AF%81%E6%8B%AC%E5%8F%B7/</guid>
      <description>Given a string containing just the characters &#39;(&#39;, &#39;)&#39;, &#39;{&#39;, &#39;}&#39;, &#39;[&#39; and &#39;]&#39;, determine if the input string is valid.
The brackets must close in the correct order, &amp;quot;()&amp;quot; and &amp;quot;()[]{}&amp;quot; are all valid but &amp;quot;(]&amp;quot; and &amp;quot;([)]&amp;quot; are not.
Difficulty: Easy
这道题让我们验证字符串是否是可用的括号,这个字符串只有括号.需要用到栈,当遇到左括号的时候压入到栈里,遇到右括号的时候需要检查栈顶元素是否为对应的左括号,如果不是对应的就返回false.
class Solution { public: bool isValid(string s) { stack&amp;lt;char&amp;gt; parentheses; for (int i = 0; i&amp;lt;s.size();i++){ if (s[i]==&#39;(&#39;||s[i]==&#39;[&#39;||s[i]==&#39;{&#39;) parentheses.push(s[i]); else { if (parentheses.empty()) return false; if (s[i]==&#39;)&#39; &amp;amp;&amp;amp; parentheses.</description>
    </item>
    
  </channel>
</rss>