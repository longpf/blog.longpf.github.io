<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Binary Search on long·pf</title>
    <link>http://blog.longpengfei.com/leetcode/binary-search/</link>
    <description>Recent content in Binary Search on long·pf</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2018. All rights reserved.</copyright>
    <lastBuildDate>Tue, 27 Feb 2018 10:38:10 +0800</lastBuildDate>
    
	<atom:link href="http://blog.longpengfei.com/leetcode/binary-search/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>33. Search in Rotated Sorted Array 在旋转有序数组中搜索</title>
      <link>http://blog.longpengfei.com/post/33-search-in-rotated-sorted-array-%E5%9C%A8%E6%97%8B%E8%BD%AC%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Tue, 27 Feb 2018 10:38:10 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/33-search-in-rotated-sorted-array-%E5%9C%A8%E6%97%8B%E8%BD%AC%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%90%9C%E7%B4%A2/</guid>
      <description>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
You are given a target value to search. If found in the array return its index, otherwise return -1.
You may assume no duplicate exists in the array.
Difficulty: Medium
这道题让我们求一个旋转有序数组中是否存在一个给定的值,存在返回下标,不存在返回-1.如体重的例子0 1 2 4 5 6 7,我们不知道从哪开始旋转的,他的选择情况有7种</description>
    </item>
    
    <item>
      <title>29. Divide Two Integers 两数相除</title>
      <link>http://blog.longpengfei.com/post/29-divide-two-integers-%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4/</link>
      <pubDate>Wed, 07 Feb 2018 16:45:36 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/29-divide-two-integers-%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4/</guid>
      <description>Divide two integers without using multiplication, division and mod operator.
If it is overflow, return MAX_INT.
Difficulty: Medium
这道题让我们求两个数相除A/B,并且不让使用乘法,除法,取余运算.这样我们只能优先想到位运算和加减法了. 假设A&amp;gt;B,最容易想到的是把A-B赋值给A,并且结果+1,然后再把A-B赋值给A,结果+1.这样一直下去.不过如果是2147483647/1这种情况不会不会通过OJ,因为效率太低,会提示Time Limit Exceeded,不可行.回头想想上面的位运算还没用到,如果A&amp;gt;2*B那么结果是不是加2,如果A&amp;gt;2*2*2B结果是不是加2*2.定义t为除数,p为结果的计数m为被除数的绝对值,n为除数的绝对值.例如100/2
   t
(除数) p
(计数) res
(结果) m
(被除数) t
(除数) p
(计数) res
(结果) m
(被除数) t
(除数) p
(计数) res
(结果) m
(被除数)     2 1 32 36 2 1 48 4 2 1 50 0   4 2   4 2   4 2     8 4   8 4         16 8   16 8         32 16   32 16         64 32              解法1 class Solution { public: int divide(int dividend, int divisor) { if (divisor==0||(dividend==INT_MIN&amp;amp;&amp;amp;divisor==-1)) return INT_MAX; int sign = ((dividend&amp;lt;0)^(divisor&amp;lt;0))?</description>
    </item>
    
    <item>
      <title>Median of Two Sorted Arrays两个数组的中位数</title>
      <link>http://blog.longpengfei.com/post/median-of-two-sorted-arrays%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</link>
      <pubDate>Sat, 13 Jan 2018 15:45:29 +0800</pubDate>
      
      <guid>http://blog.longpengfei.com/post/median-of-two-sorted-arrays%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</guid>
      <description>There are two sorted arrays nums1 and nums2 of size m and n respectively.
Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).
Example1:
nums1 = [1, 3] nums2 = [2] The median is 2.0  Example2
nums1 = [1, 2] nums2 = [3, 4] The median is (2 + 3)/2 = 2.5  分析 解法一:
思路来自Very concise O(log(min(M,N))) iterative solution with detailed explanation 看到O(log (m+n))一般来说就是分治法或是二分搜索,一个数组(长度为N)在中间切一刀,那它左边的索引L为(N-1)/2,右边的索引R为N/2.</description>
    </item>
    
  </channel>
</rss>